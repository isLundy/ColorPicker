#! C:/Program Files/Nuke13.0v6/nuke-13.0.6.dll -nx
Gizmo {
 inputs 0
 onCreate "n = nuke.thisNode()\nn\['w_cChip'].setFlag(nuke.STARTLINE)\nn\['o_cChip'].setFlag(nuke.STARTLINE)\nn\['w_python_example'].setFlag(0x0000000010000000)\nn\['o_html_example'].setFlag(0x0000000010000000)\nnuke.knobDefault(\"ColorPicker.w_hex\", \"0x347FFFF\")\nnuke.knobDefault(\"ColorPicker.w_int\", \"55050239\")\nnuke.knobDefault(\"ColorPicker.w_python_example\", \"nuke.selectedNode()\['tile_color'].setValue(55050239)\")\nnuke.knobDefault(\"ColorPicker.o_hex\", \"#1E90FF\")\nnuke.knobDefault(\"ColorPicker.current_tile_color\", \"512819199\")\nnuke.knobDefault(\"ColorPicker.o_text_test\", \"You can enter any text you want to test ~•.•~\")\nnuke.knobDefault(\"ColorPicker.o_html_example\", \"<span style='color:#1E90FF'>You can enter any text you want to test ~•.•~</span>\")"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\n\nwith n:\n    linear = nuke.toNode(\"toLinear\")\n    other = nuke.toNode(\"toOther\")\n    cConstant = nuke.toNode(\"ColorConstant\")\n    cSwitch = nuke.toNode(\"cSwitch\")\n\n#=======================================================================function\ndef numCorrect_1(numbers):\n    if isinstance(numbers, list):\n        for number in numbers:\n            if number < 0:\n                numbers\[numbers.index(number)] = 0\n            elif number > 1:\n                numbers\[numbers.index(number)] = 1\n\n    else:\n        if numbers < 0:\n            numbers = 0\n        elif numbers > 1:\n            numbers = 1\n\n    return numbers\n\ndef numCorrect_255(r, g, b):\n    numbers = \[r, g, b]\n\n    for value in numbers:\n        if value < 0:\n            numbers\[numbers.index(value)] = 0\n        elif value > 255:\n            numbers\[numbers.index(value)] = 255\n        else:\n            numbers\[numbers.index(value)] = int(round(value))\n\n    return numbers\[0], numbers\[1], numbers\[2]\n\ndef check_hex(hex, num):\n    alphanumber = list(\"0123456789ABCDEFabcdef\")\n    str0x = \[\"0x\", \"0X\"]\n    strff = \[\"FF\", \"ff\", \"fF\", \"Ff\"]\n\n    if num == 0:\n        if hex == \"\":\n            return \"blank\"\n        elif hex\[:2] in str0x and hex\[-2:] in strff and len(hex) <= 10 and hex\[2:].isalnum():\n            for i in hex\[2:]:\n                if i not in alphanumber:\n                    return False\n        else:\n            return False\n\n    if num == 1:\n        if hex == \"\":\n            return \"blank\"\n        elif hex\[0] == \"#\" and len(hex) == 7 and hex\[1:].isalnum():\n            for i in hex\[1:]:\n                if i not in alphanumber:\n                    return False\n        else:\n            return False\n\ndef check_integer(check_int):\n    if check_int == \"\":\n        return \"blank\"\n\n    elif check_int.count(\".\") == 1:\n        if check_int.split(\".\")\[1] == \"0\":\n            check_int = check_int.split(\".\")\[0]\n            if check_int.isdigit():\n                if int(check_int) >= 255 and int(check_int) <= int('0xFFFFFFFF', 16):\n                    return True\n\n    elif check_int.isdigit():\n        if int(check_int) >= 255 and int(check_int) <= int('0xFFFFFFFF', 16):\n            return True\n\ndef float2Hex(r, g, b):\n    r = int(round(r*255))\n    g = int(round(g*255))\n    b = int(round(b*255))\n    return hex(int((\"0x\" + \"\{:02x\}\{:02x\}\{:02x\}\".format(r, g, b) + \"ff\"), 16))\n\ndef rgb2Hex(r, g, b):\n    r = int(round(r))\n    g = int(round(g))\n    b = int(round(b))\n    return \"#\" + \"\{:02x\}\{:02x\}\{:02x\}\".format(r, g, b)\n\ndef o_hex2Int(n, sHex):\n    n\['o_r_cChip'].setValue(int(\"0x\" + sHex\[1:3] + \"0000ff\", 16))\n    n\['o_g_cChip'].setValue(int(\"0x\" + sHex\[3:5] + \"00ff\", 16))\n    n\['o_b_cChip'].setValue(int(\"0x\" + sHex\[5:7] + \"ff\", 16))\n\ndef num2Multiple(numbers):\n    if isinstance(numbers, list):\n        numbers.append(1.0)\n    else:\n        numbers = \[numbers, numbers, numbers, 1.0]\n\n    return numbers\n\ndef sglOrMultiple(n, r, g, b):\n    if n\['w_float'].singleValue() and (r==g and r==b and g==b):\n        return r\n    else:\n        return r, g, b\n\ndef convCase(case, num, f):\n    if f == 0:\n        case = str(case)\[:num] + str(case)\[num:].upper()\n    else:\n        case = str(case)\[:num] + str(case)\[num:].lower()\n\n    return case\n\ndef check_link_tile(n):\n    if n\['link_tile_color'].getValue() == False:\n        n\['linkSymbol'].setEnabled(False)\n        n\['tile_color'].setValue(int(n\['w_cChip'].getValue()))\n        n\['current_tile_color'].setLabel(\"tile_color \")\n        n\['current_tile_color'].setValue(str(int(n\['w_cChip'].getValue())))\n    else:\n        n\['linkSymbol'].setEnabled(True)\n        n\['tile_color'].setValue(int(n\['o_cChip'].getValue()))\n        n\['current_tile_color'].setLabel(\"tile_color \")\n        n\['current_tile_color'].setValue(str(int(n\['o_cChip'].getValue())))\n\ndef set_python_example(n):\n    python_example = \"nuke.selectedNode()\['tile_color'].setValue(\{\})\".format(n\['w_int'].getValue())\n    n\['w_python_example'].setValue(python_example)\n\ndef set_html_example(n):\n    html_example1 = \"<span style='color:\{\}\".format(n\['o_hex'].getValue())\n    html_example2 = \"'>\{\}</span>\".format(n\['o_text_test'].getValue())\n    html_example = html_example1 + html_example2\n    n\['o_html_example'].setValue(html_example)\n\n    if n\['o_text_test'].getValue() == \"\":\n        n\['o_html_display'].setValue(\"<span style='font-size:20px'>&nbsp;</span>\")\n    else:\n        html_display1 = \"; font-size:20px\"\n        html_display = html_example1 + html_display1 + html_example2\n        n\['o_html_display'].setValue(html_display)\n\n#===============================================================linear and other\ndef linear2other(cConstant, fRGB, cSwitch, other, n, w_int, check=True):\n    cConstant\['color'].setValue(num2Multiple(fRGB))\n    cSwitch\['which'].setValue(0)\n\n    o_r = int(round(other.sample('red', 0, 0)*255))\n    o_g = int(round(other.sample('green', 0, 0)*255))\n    o_b = int(round(other.sample('blue', 0, 0)*255))\n    o_hex = rgb2Hex(o_r, o_g, o_b)\n\n    n\['o_r'].setValue(o_r)\n    n\['o_g'].setValue(o_g)\n    n\['o_b'].setValue(o_b)\n    n\['o_hex'].setValue(convCase(o_hex, 1, n\['o_hex_case'].getValue()))\n    n\['o_errorMsg'].setValue(\" \")\n    n\['o_cChip'].setValue(int(\"0x\" + o_hex\[1:] + \"ff\", 16))\n    o_hex2Int(n, o_hex)\n\n    if check == True:\n        check_link_tile(n)\n\n    set_python_example(n)\n    set_html_example(n)\n\n    if n\['w_hex_case'].enabled() == False:\n        n\['w_hex_case'].setEnabled(True)\n\n    n\['o_text_test'].setEnabled(True)\n    if n\['o_hex_case'].enabled() == False:\n        n\['o_hex_case'].setEnabled(True)\n\ndef other2Linear(cConstant, o_r, o_g, o_b, cSwitch, linear, n, o_hex, check=True):\n    cConstant\['color'].setValue(\[o_r/255, o_g/255, o_b/255, 1.0])\n    cSwitch\['which'].setValue(1)\n\n    fR = linear.sample('red', 0, 0)\n    fG = linear.sample('green', 0, 0)\n    fB = linear.sample('blue', 0, 0)\n    w_hex = float2Hex(fR, fG, fB)\n    w_int = int(w_hex, 16)\n\n    n\['w_float'].setValue(sglOrMultiple(n, fR, fG, fB))\n    n\['w_hex'].setValue(convCase(w_hex, 2, n\['w_hex_case'].getValue()))\n    n\['w_int'].setValue(str(w_int))\n    n\['w_errorMsg'].setValue(\" \")\n    n\['w_cChip'].setValue(w_int)\n\n    if check == True:\n        check_link_tile(n)\n\n    set_python_example(n)\n    set_html_example(n)\n\n    if n\['w_hex_case'].enabled() == False:\n        n\['w_hex_case'].setEnabled(True)\n\n    n\['o_text_test'].setEnabled(True)\n    if n\['o_hex_case'].enabled() == False:\n        n\['o_hex_case'].setEnabled(True)\n\n#==================================================================working space\n#==================================================================working space\n#==================================================================working space\nif k.name() == \"w_float\":\n    #=========working space\n    fRGB = numCorrect_1(n\['w_float'].getValue())\n    n\['w_float'].setValue(fRGB)\n\n    if n\['w_float'].singleValue():\n        fR, fG, fB = fRGB, fRGB, fRGB\n    else:\n        fR, fG, fB = fRGB\[0], fRGB\[1], fRGB\[2]\n\n    w_hex = float2Hex(fR, fG, fB)\n    w_int = int(w_hex, 16)\n\n    n\['w_hex'].setValue(convCase(w_hex, 2, n\['w_hex_case'].getValue()))\n    n\['w_int'].setValue(str(w_int))\n    n\['w_errorMsg'].setValue(\" \")\n    n\['w_cChip'].setValue(w_int)\n\n    #=========other space\n    linear2other(cConstant, fRGB, cSwitch, other, n, w_int)\n\nelif k.name() == \"w_hex\":\n    if check_hex(n\['w_hex'].getValue(), 1) == \"blank\":\n        w_errorMsg = \"<span style='color:#FFE500'>The value can't be blank.</span>\"\n        n\['w_errorMsg'].setValue(w_errorMsg)\n        n\['w_hex_case'].setEnabled(False)\n\n    elif check_hex(n\['w_hex'].getValue(), 0) == False:\n        msg1 = \"<span style='color:#FFE500'>The&nbsp;&nbsp;</span>\"\n        msg2 = str(n\['w_hex'].getValue())\n        msg3 = \"<span style='color:#FFE500'>&nbsp;&nbsp;is invalid.</span>\"\n        w_errorMsg = msg1 + msg2 + msg3\n        n\['w_errorMsg'].setValue(w_errorMsg)\n        n\['w_hex_case'].setEnabled(False)\n\n    else:\n        #=========working space\n        w_hex = hex(int(n\['w_hex'].getValue(), 16))\n        n\['w_hex'].setValue(convCase(w_hex, 2, n\['w_hex_case'].getValue()))\n        w_hex_10 = \"\{:#010x\}\".format(int(n\['w_hex'].getValue(), 16))\n\n        fR = int(w_hex_10\[2:4], 16)/255\n        fG = int(w_hex_10\[4:6], 16)/255\n        fB = int(w_hex_10\[6:8], 16)/255\n        fRGB = \[fR, fG, fB]\n        w_int = int(n\['w_hex'].getValue(), 16)\n\n        n\['w_float'].setValue(sglOrMultiple(n, fR, fG, fB))\n        n\['w_int'].setValue(str(w_int))\n        n\['w_errorMsg'].setValue(\" \")\n        n\['w_cChip'].setValue(w_int)\n\n        #=========other space\n        linear2other(cConstant, fRGB, cSwitch, other, n, w_int)\n\nelif k.name() == \"w_int\":\n    if check_integer(n\['w_int'].getValue()) == True:\n        #=========working space\n        w_int = int(float(n\['w_int'].getValue()))\n        n\['w_int'].setValue(str(w_int))\n\n        w_hex_10 = \"\{:#010x\}\".format(w_int)\n        fR = int(w_hex_10\[2:4], 16)/255\n        fG = int(w_hex_10\[4:6], 16)/255\n        fB = int(w_hex_10\[6:8], 16)/255\n        fRGB = \[fR, fG, fB]\n        w_hex = hex(w_int)\n\n        n\['w_float'].setValue(sglOrMultiple(n, fR, fG, fB))\n        n\['w_hex'].setValue(convCase(w_hex, 2, n\['w_hex_case'].getValue()))\n        n\['w_errorMsg'].setValue(\" \")\n        n\['w_cChip'].setValue(w_int)\n\n        #=========other space\n        linear2other(cConstant, fRGB, cSwitch, other, n, w_int)\n\n    elif check_integer(n\['w_int'].getValue()) == \"blank\":\n        w_errorMsg = \"<span style='color:#FFE500'>The value can't be blank.</span>\"\n        n\['w_errorMsg'].setValue(w_errorMsg)\n\n    else:\n        msg1 = \"<span style='color:#FFE500'>The&nbsp;&nbsp;</span>\"\n        msg2 = n\['w_int'].getValue()\n        msg3 = \"<span style='color:#FFE500'>&nbsp;&nbsp;is invalid.</span>\"\n        w_errorMsg = msg1 + msg2 + msg3\n        n\['w_errorMsg'].setValue(w_errorMsg)\n\nelif k.name() == \"w_cChip\":\n    #=========working space\n    w_int = int(n\['w_cChip'].getValue())\n\n    w_hex_10 = \"\{:#010x\}\".format(w_int)\n    fR = int(w_hex_10\[2:4], 16)/255\n    fG = int(w_hex_10\[4:6], 16)/255\n    fB = int(w_hex_10\[6:8], 16)/255\n    fRGB = \[fR, fG, fB]\n    w_hex = hex(w_int)\n\n    n\['w_float'].setValue(sglOrMultiple(n, fR, fG, fB))\n    n\['w_hex'].setValue(convCase(w_hex, 2, n\['w_hex_case'].getValue()))\n    n\['w_int'].setValue(str(w_int))\n    n\['w_errorMsg'].setValue(\" \")\n\n    #=========other space\n    linear2other(cConstant, fRGB, cSwitch, other, n, w_int)\n\n#=====================================================================tile_color\nelif k.name() == \"tile_color\":\n    value_int = int(n\['tile_color'].getValue())\n\n    n\['current_tile_color'].setLabel(\"tile_color \")\n    n\['current_tile_color'].setValue(str(value_int))\n\n    if n\['link_tile_color'].getValue() == False:\n        #=========working space\n        w_int = value_int\n        w_hex_10 = \"\{:#010x\}\".format(w_int)\n        fR = int(w_hex_10\[2:4], 16)/255\n        fG = int(w_hex_10\[4:6], 16)/255\n        fB = int(w_hex_10\[6:8], 16)/255\n        fRGB = \[fR, fG, fB]\n        w_hex = hex(w_int)\n\n        n\['w_float'].setValue(sglOrMultiple(n, fR, fG, fB))\n        n\['w_hex'].setValue(convCase(w_hex, 2, n\['w_hex_case'].getValue()))\n        n\['w_int'].setValue(str(w_int))\n        n\['w_errorMsg'].setValue(\" \")\n        n\['w_cChip'].setValue(w_int)\n\n        #=========other space\n        linear2other(cConstant, fRGB, cSwitch, other, n, w_int, False)\n\n    else:\n        #=========other space\n        o_hex = \"#\" + \"\{:08x\}\".format(value_int)\[:6]\n        o_r = int(o_hex\[1:3], 16)\n        o_g = int(o_hex\[3:5], 16)\n        o_b = int(o_hex\[5:7], 16)\n\n        n\['o_r'].setValue(o_r)\n        n\['o_g'].setValue(o_g)\n        n\['o_b'].setValue(o_b)\n        n\['o_hex'].setValue(convCase(o_hex, 1, n\['o_hex_case'].getValue()))\n        n\['o_errorMsg'].setValue(\" \")\n        n\['o_cChip'].setValue(value_int)\n        o_hex2Int(n, o_hex)\n\n        #=========working space\n        other2Linear(cConstant, o_r, o_g, o_b, cSwitch, linear, n, o_hex, False)\n\nelif k.name() == \"current_tile_color\":\n    if check_integer(n\['current_tile_color'].getValue()) == True:\n        value_int = int(float(n\['current_tile_color'].getValue()))\n        \n        n\['current_tile_color'].setValue(str(value_int))\n        n\['current_tile_color'].setLabel(\"tile_color \")\n        n\['tile_color'].setValue(value_int)\n\n        if n\['link_tile_color'].getValue() == False:\n            #=========working space\n            w_int = value_int\n            w_hex_10 = \"\{:#010x\}\".format(w_int)\n            fR = int(w_hex_10\[2:4], 16)/255\n            fG = int(w_hex_10\[4:6], 16)/255\n            fB = int(w_hex_10\[6:8], 16)/255\n            fRGB = \[fR, fG, fB]\n            w_hex = hex(w_int)\n\n            n\['w_float'].setValue(sglOrMultiple(n, fR, fG, fB))\n            n\['w_hex'].setValue(convCase(w_hex, 2, n\['w_hex_case'].getValue()))\n            n\['w_int'].setValue(str(w_int))\n            n\['w_errorMsg'].setValue(\" \")\n            n\['w_cChip'].setValue(w_int)\n\n            #=========other space\n            linear2other(cConstant, fRGB, cSwitch, other, n, w_int, False)\n\n        else:\n            #=========other space\n            o_hex = \"#\" + \"\{:08x\}\".format(value_int)\[:6]\n            o_r = int(o_hex\[1:3], 16)\n            o_g = int(o_hex\[3:5], 16)\n            o_b = int(o_hex\[5:7], 16)\n\n            n\['o_r'].setValue(o_r)\n            n\['o_g'].setValue(o_g)\n            n\['o_b'].setValue(o_b)\n            n\['o_hex'].setValue(convCase(o_hex, 1, n\['o_hex_case'].getValue()))\n            n\['o_errorMsg'].setValue(\" \")\n            n\['o_cChip'].setValue(value_int)\n            o_hex2Int(n, o_hex)\n\n            #=========working space\n            other2Linear(cConstant, o_r, o_g, o_b, cSwitch, linear, n, o_hex, False)\n\n    elif check_integer(n\['current_tile_color'].getValue()) == \"blank\":\n        w_errorMsg = \"<span style='color:#FFE500'>Blank </span>\"\n        n\['current_tile_color'].setLabel(w_errorMsg)\n\n    else:\n        w_errorMsg = \"<span style='color:#FFE500'>Invalid </span>\"\n        n\['current_tile_color'].setLabel(w_errorMsg)\n\n#====================================================================other space\n#====================================================================other space\n#====================================================================other space\nelif k.name() in \['o_r', 'o_g', 'o_b']:\n    #=========other space\n    o_r, o_g, o_b = n\['o_r'].getValue(), n\['o_g'].getValue(), n\['o_b'].getValue()\n    o_r, o_g, o_b = numCorrect_255(o_r, o_g, o_b)\n    o_hex = rgb2Hex(o_r, o_g, o_b)\n\n    n\['o_r'].setValue(o_r)\n    n\['o_g'].setValue(o_g)\n    n\['o_b'].setValue(o_b)\n    n\['o_hex'].setValue(convCase(o_hex, 1, n\['o_hex_case'].getValue()))\n    n\['o_errorMsg'].setValue(\" \")\n    n\['o_cChip'].setValue(int(\"0x\" + o_hex\[1:] + \"ff\", 16))\n    o_hex2Int(n, o_hex)\n\n    #=========working space\n    other2Linear(cConstant, o_r, o_g, o_b, cSwitch, linear, n, o_hex)\n\nelif k.name() == \"o_hex\":\n    if check_hex(n\['o_hex'].getValue(), 1) == \"blank\":\n        errorMsg = \"<span style='color:#FFE500'>The value can't be blank.</span>\"\n        n\['o_errorMsg'].setValue(errorMsg)\n        n\['o_text_test'].setEnabled(False)\n        n\['o_hex_case'].setEnabled(False)\n\n    elif check_hex(n\['o_hex'].getValue(), 1) == False:\n        msg1 = \"<span style='color:#FFE500'>The&nbsp;&nbsp;</span>\"\n        msg2 = str(n\['o_hex'].getValue())\n        msg3 = \"<span style='color:#FFE500'>&nbsp;&nbsp;is invalid.</span>\"\n        o_errorMsg = msg1 + msg2 + msg3\n        n\['o_errorMsg'].setValue(o_errorMsg)\n        n\['o_text_test'].setEnabled(False)\n        n\['o_hex_case'].setEnabled(False)\n\n    else:\n        #=========other space\n        n\['o_hex'].setValue(convCase(n\['o_hex'].getValue(), 1, n\['o_hex_case'].getValue()))\n        o_hex = n\['o_hex'].getValue()\n\n        o_r = int(o_hex\[1:3], 16)\n        o_g = int(o_hex\[3:5], 16)\n        o_b = int(o_hex\[5:7], 16)\n\n        n\['o_r'].setValue(o_r)\n        n\['o_g'].setValue(o_g)\n        n\['o_b'].setValue(o_b)\n        n\['o_errorMsg'].setValue(\" \")\n        n\['o_cChip'].setValue(int(\"0x\" + o_hex\[1:] + \"ff\", 16))\n        o_hex2Int(n, o_hex)\n\n        #=========working space\n        other2Linear(cConstant, o_r, o_g, o_b, cSwitch, linear, n, o_hex)\n\nelif k.name() == \"o_cChip\":\n    #=========other space\n    o_hex = \"#\" + \"\{:08x\}\".format(int(n\['o_cChip'].getValue()))\[:6]\n\n    o_r = int(o_hex\[1:3], 16)\n    o_g = int(o_hex\[3:5], 16)\n    o_b = int(o_hex\[5:7], 16)\n\n    n\['o_r'].setValue(o_r)\n    n\['o_g'].setValue(o_g)\n    n\['o_b'].setValue(o_b)\n    n\['o_hex'].setValue(convCase(o_hex, 1, n\['o_hex_case'].getValue()))\n    n\['o_errorMsg'].setValue(\" \")\n    o_hex2Int(n, o_hex)\n\n    #=========working space\n    other2Linear(cConstant, o_r, o_g, o_b, cSwitch, linear, n, o_hex)\n\n#===================================================================other action\nelif k.name() == \"link_tile_color\":\n    check_link_tile(n)\n\nelif k.name() == \"w_hex_case\":\n    n\['w_hex'].setValue(convCase(n\['w_hex'].getValue(), 2, k.getValue()))\n\nelif k.name() == \"o_hex_case\":\n    n\['o_hex'].setValue(convCase(n\['o_hex'].getValue(), 1, k.getValue()))\n    set_html_example(n)\n\nelif k.name() == \"o_text_test\":\n    set_html_example(n)"
 tile_color 0x1e90ffff
 label "\[python \{nuke.thisNode()\['o_hex'].getValue() if nuke.thisNode()\['o_errorMsg'].value() == \" \" else \"Error\"\}]"
 note_font Verdana
 note_font_color 0xff
 lock_connections true
 addUserKnob {20 colorPicker l "Color Picker"}
 addUserKnob {26 colorPicker_title l " " T "<b><span style=\"font-size:49px\">Color Picker</span><span style=\"font-size:18px\"> by Lundy Hu</span></b>"}
 addUserKnob {26 version l v3.0 t "Plam tree" -STARTLINE T "<span style='font-size:50px;'>&#x1F334;</span>"}
 addUserKnob {1 current_tile_color l "tile_color " t "\nDecimal representation in nuke.\nMust be an integer.\n\nrange: 255 - 4294967295\n" -STARTLINE}
 current_tile_color 512819199
 addUserKnob {26 spacer_3 l "" +STARTLINE}
 addUserKnob {26 workingSpace l "" t "\n<nobr>S(Hotkey) &minus; Project Settings &minus; default LUT settings &minus; working space &gt; (linear or ACES&minus;cg)</nobr>" +STARTLINE T " "}
 addUserKnob {40 w_cChip l Linear t "\nNuke's working space is locked to linear in order for it to be able to obey Grassman's Laws.\n\nThe default working space for Nuke's colour management, whether native or OCIO, while using the 'nuke-default' configuration, is linear. Other OCIO configurations may use different colorspaces for the working space.\n\nColor range: 0-1\n"}
 w_cChip 0x347ffff
 addUserKnob {18 w_float l Float}
 w_float {0.01298303064 0.278894335 1}
 addUserKnob {6 w_float_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
 w_float_panelDropped true
 addUserKnob {26 w_float_range l " " t "Color range: 0-1" +DISABLED T 0-1}
 addUserKnob {26 spacer_1 l "" +STARTLINE T " "}
 addUserKnob {1 w_hex l Hex t "\nHex representation format in nuke:<span>&nbsp;</span>\n\n0xRRGGBBAA\n\nR = Red\nG = Green\nB = Blue\nA = Alpha (Alpha defaults to 1 and is represented by FF.)\n\nrange: 0xFF - 0xFFFFFFFF\n"}
 w_hex 0x347FFFF
 addUserKnob {4 w_hex_case l "" t "Convert case" -STARTLINE M {UPPER lower "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {1 w_int l Int t "\nDecimal representation in nuke.\nMust be an integer.\n\nrange: 255(0xFF) - 4294967295(0xFFFFFFFF)\n"}
 w_int 55050239
 addUserKnob {26 w_decimal l "<b>= </b>" -STARTLINE +DISABLED T "Decimal "}
 addUserKnob {26 w_errorMsg l " " T " "}
 addUserKnob {1 w_python_example l Example t "\npython code.\n\nThe code is read-only, copying is allowed.\n"}
 w_python_example "nuke.selectedNode()\['tile_color'].setValue(55050239)"
 addUserKnob {26 w_python l "<b>= </b>" -STARTLINE +DISABLED T "python   "}
 addUserKnob {26 spacer_11 l "" +STARTLINE T " "}
 addUserKnob {26 convSymbol l " " +DISABLED T "<span style='font-size:50px;' style=\"font-weight:bold;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&uarr;&darr;</span>"}
 addUserKnob {26 otherSpace l "" +STARTLINE T " "}
 addUserKnob {40 o_cChip l sRGB t "\nsRGB (~2.20)\n\nColor range: 0-1\n"}
 o_cChip 0x1e90ffff
 addUserKnob {26 linkSymbol l " " -STARTLINE T "<b>= = = > </b>"}
 addUserKnob {6 link_tile_color l tile_color t "\nLink with the tile_color of this node.\n\nThe color space of tile_color defaults to linear.\n" -STARTLINE}
 link_tile_color true
 addUserKnob {7 o_r l "R <b><font color=\"#f23030\">•</font></b>" t "Red value" R 0 255}
 o_r 30
 addUserKnob {26 dot_r l "" -STARTLINE +DISABLED T <b>•</b>}
 addUserKnob {40 o_r_cChip l "" t "Channel: Red" -STARTLINE +DISABLED}
 o_r_cChip 0x1e0000ff
 addUserKnob {7 o_g l "G <b><font color=\"#17bf17\">•</font></b>" t "Green value" R 0 255}
 o_g 144
 addUserKnob {26 dot_g l "" -STARTLINE +DISABLED T <b>•</b>}
 addUserKnob {40 o_g_cChip l "" t "Channel: Green" -STARTLINE +DISABLED}
 o_g_cChip 0x9000ff
 addUserKnob {7 o_b l "B <b><font color=\"#1e90ff\">•</font></b>" t "Blue value" R 0 255}
 o_b 255
 addUserKnob {26 dot_b l "" -STARTLINE +DISABLED T <b>•</b>}
 addUserKnob {40 o_b_cChip l "" t "Channel: Blue" -STARTLINE +DISABLED}
 o_b_cChip 0xffff
 addUserKnob {26 o_8bit_range l 8bit t "Color range: 0-255" +DISABLED T 0-255}
 addUserKnob {26 spacer_5 l "" +STARTLINE T " "}
 addUserKnob {1 o_hex l Hex t "\nHex representation format in html:<span>&nbsp;</span>\n\n#RRGGBB <span>&nbsp;</span>\n\nR = Red\nG = Green\nB = Blue\n\nrange: #000000 - #FFFFFF\n"}
 o_hex #1E90FF
 addUserKnob {4 o_hex_case l "" t "Convert case" -STARTLINE M {UPPER lower "" "" "" "" "" "" "" ""}}
 addUserKnob {26 o_errorMsg l " " T " "}
 addUserKnob {1 o_text_test l Test t "\nExample text.\n\nYou can enter any text you want to test.\n"}
 o_text_test "You can enter any text you want to test ~•.•~"
 addUserKnob {26 o_text l "<b>= </b>" -STARTLINE +DISABLED T "text       "}
 addUserKnob {1 o_html_example l Example t "\nhtml code\n\nThe code is read-only, copying is allowed.\n"}
 o_html_example "<span style='color:#1E90FF'>You can enter any text you want to test ~•.•~</span>"
 addUserKnob {26 o_html l "<b>= </b>" -STARTLINE +DISABLED T "HTML     "}
 addUserKnob {26 spacer_9 l "" +STARTLINE T " "}
 addUserKnob {26 o_html_display l " " T "<span style='color:#1E90FF; font-size:20px'>You can enter any text you want to test ~•.•~</span>"}
 addUserKnob {26 spacer_10 l "" +STARTLINE T " "}
 addUserKnob {26 final l "" +STARTLINE}
 addUserKnob {26 spacer_7 l "" +STARTLINE T " "}
 addUserKnob {41 format l Format T ColorConstant.format}
 addUserKnob {26 spacer_6 l "" +STARTLINE T "\n\n\n"}
 addUserKnob {22 help_1 l Help t "<nobr>Click to open the help infomention.</nobr>" T "nuke.message('''\n<span style=\"font-size:18px\" style=\"color:#d99726\">01.========================================</span>\n\n<span style=\"font-size:18px\">The node is completely controlled by python code.</span>\n\n<span style=\"font-size:18px\">You only need to change one color parameter at will, all other knobs are dynamically linked and <span style=\"color:#ff4d4d\">live update.</span></span>\n\n<span style=\"font-size:18px\" style=\"color:#d99726\">02.========================================</span>\n\n<span style=\"font-size:18px\">Nuke's numerical precision mechanism will cause some floats to appear as different values.</span>\n\n<span style=\"font-size:18px\">For example, the <span style=\"color:#ff4d4d\">red</span> value in the knob tile_color is set to <span style=\"color:#ff4d4d\">0.003</span>, and the <span style=\"color:#ff4d4d\">red</span> value becomes <span style=\"color:#ff4d4d\">0</span> when the knob is turned on again. Don't worry, you can still use it normally.</span>\n\n<span style=\"font-size:18px\" style=\"color:#d99726\">03.========================================</span>\n\n<span style=\"font-size:18px\">The color output is <span style=\"color:#ff4d4d\">linear</span> of this node.</span>\n\n<span style=\"font-size:18px\" style=\"color:#d99726\">04.========================================</span>\n\n<span style=\"font-size:18px\">Why is there no option to convert sRGB to ACES-cg?</span>\n\n<span style=\"font-size:18px\">When the value of sRGB is 208 (0-255), the float number corresponding to the ACES-cg color space is 1.02203, which is out the range of the knob tile_color (0-1).</span>\n''')" +STARTLINE}
 addUserKnob {26 spacer_2 l "" -STARTLINE T " "}
 addUserKnob {22 nukepedia l NukePedia t "Click to open the website." -STARTLINE T "import webbrowser\n\nwebbrowser.open(\"https://www.nukepedia.com/gizmos/colour/color-picker\")"}
 addUserKnob {26 spacer_8 l "" -STARTLINE T " "}
 addUserKnob {22 github l GitHub t "Click to open the website." -STARTLINE T "import webbrowser\n\nwebbrowser.open(\"https://github.com/isLundy/ColorPicker\")"}
 addUserKnob {26 spacer_4 l "" -STARTLINE T " "}
 addUserKnob {22 check_for_updates l "Check for updates" -STARTLINE T "import requests\n\nn = nuke.thisNode()\nurl = \"https://api.github.com/repos/isLundy/ColorPicker/releases/latest\"\n\ntry:\n    response = requests.get(url, timeout=(6.05, 27))\nexcept:\n    nuke.message(\"<nobr><span style='font-size:18px'>Please check your <span style='color:#ff4d4d'>internet connection!</span></span></nobr>\")\nelse:\n    curV = n\['version'].label()\n    latV = response.json()\['tag_name']\n    v1 = float(curV.lstrip('v'))\n    v2 = float(latV.lstrip('v'))\n\n    if v1 < v2:\n        msg1 = (\"<nobr><span style='font-size:18px'>The current version is \{\}. The latest version is <span style='color:#fcb434;'>\{\}</span>.</span></nobr>\".format(curV, latV))\n        msg2 = (\"<nobr><p style='font-size:18px'>You can download the ColorPicker_\{\} at <a href='https://www.nukepedia.com/gizmos/colour/color-picker' style='color:#fcb434;'>here</a>.</p></nobr><p>\".format(latV))\n        msg = msg1 + msg2\n        nuke.message(msg)\n    elif v1 == v2:\n        nuke.message(\"<nobr><span style='font-size:18px'>The current version \{\} is the latest version.</span></nobr><p>\".format(curV))\n    elif v1 > v2:\n        nuke.message(\"<nobr><p style='font-size:18px'>The version number \{\} is wrong.</p></nobr><nobr><p style='font-size:18px'>Please don't manually change the version number of the gizmo.</p></nobr><p>\".format(curV))"}
}
 Constant {
  inputs 0
  color {0.1176470588 0.5647058824 1 1}
  name ColorConstant
  xpos -4
  ypos -78
 }
set N549e7400 [stack 0]
 Colorspace {
  colorspace_in sRGB
  name toLinear
  label "\[value colorspace_in] > \[python \{\"Linear\" if nuke.thisNode()\['colorspace_out'].value() == \"RGB\" else nuke.thisNode()\['colorspace_out'].value()\}]"
  selected true
  xpos -175
  ypos 107.5
 }
push $N549e7400
 Switch {
  inputs 2
  which 1
  name cSwitch
  label "\[value which]"
  xpos -4
  ypos 107.5
 }
 Output {
  name Output1
  xpos -4
  ypos 279
 }
push $N549e7400
 Colorspace {
  colorspace_out sRGB
  name toOther
  label "\[python \{\"Linear\" if nuke.thisNode()\['colorspace_in'].value() == \"RGB\" else nuke.thisNode()\['colorspace_in'].value()\}] > \[value colorspace_out]"
  xpos 167
  ypos 107.5
 }
end_group
